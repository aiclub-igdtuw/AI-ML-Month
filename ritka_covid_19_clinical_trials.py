# -*- coding: utf-8 -*-
"""Ritka_Covid-19 Clinical Trials.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CrQQr0GFK4wrmskNMAwTUokr-8nxDJGx
"""

import pandas as pd
import numpy as np
import seaborn as sns

data_set = pd.read_csv("/content/COVID clinical trials.csv.zip")
data_set

from pandas import DataFrame
df = DataFrame(data_set)
df

"""### Finding the missing values in a dataset using **.isna()** method"""

df.isna()

"""### Droping all the missing values using **dropna()** method"""

df.dropna()

"""###Filling all the missing values in a dataset using fillna() method and inside the parenthesis mentioning the value that will replcae NaN as missing"""

df.fillna("missing")

"""###We can also fill the missing values for a specified column as below: """

df.fillna({'Results First Posted': 'Not applicable','Acronym' : 'No result tested'})

"""###fillna() method is what I prefer the most.The fillna() method replaces the NULL values with a specified value. The fillna() method returns a new DataFrame object unless the inplace parameter is set to True , in that case the fillna() method does the replacing in the original DataFrame instead."""

df.columns   # Mentioning all the columns in series

df.loc[:,'Rank': 'Study Results']  #loc method helps to select the columns by specifying the range by mentioning the columns name rather than index.

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt

r = df.Rank.head()
r

t = df.Title.head()
t

"""###LINE PLOT
####Line plots are used to display numerical, discrete data only, not the continuous data
"""

plt.plot(r,t)

"""### BAR PLOT
####vertical bar charts are useful to compare different categorical or discrete variables, such as age groups, classes, schools, etc., as long as there are not too many categories to compare. They are also very useful for time series data.
"""

fig = plt.figure(figsize =(10,5))
plt.bar(r,t,width = 0.4)
plt.title("Covid - Analysis")
plt.show()

"""###PIE CHART
####pie charts are best to use when you are trying to compare parts of a whole. They do not show changes over time.
"""

sizes = r
labels = t
explode = (0.1, 0,0,0,0)
plt.pie(sizes,labels=labels,explode=explode,autopct = '%1.2f', shadow=True)
plt.axis('equal')
plt.legend(title = 'Index', loc='lower left', bbox_to_anchor=(1,0,0.3,1))
plt.title("Pie chart")
plt.show()

s=df[['Locations']]
s

"""#### stack() is used for the conversion of DataFrame into Series"""

ser = s.stack()
ser

!pip install pygal_maps_world
from pygal_maps_world.maps import World
wm = World()
wm.title='Covid-19 Spread'
wm.add(df['Locations'],df['Locations']=='CHR Orléans, Orléans, France')
# wm.render_to_file('map.svg')
print('maps')

df.info()

import matplotlib.pyplot as plt

x = df['Age'].head(5)
y = df['Gender'].head(5)

a=df['Age'].head()
b=df['Gender'].head()
plt.xlabel('Age')
plt.ylabel('Gender')
plt.bar(a,b,width=0.2)
plt.show()

plt.xlabel('Age',fontsize=18)
plt.ylabel('Gender',fontsize=16)
plt.scatter(x,y)

plt.xlabel('Age',fontsize=18)
plt.ylabel('Gender',fontsize=16)
plt.plot(x,y)

sns.set(color_codes=True)

sns.jointplot(df['Age'],df['Gender'])

sns.pairplot(df[['Age','Gender','Rank']])

sns.countplot(df['Gender'])

"""##Observations from above data visualization of COVID_19 Clinical trials
#### Older age and a high number of comorbidities were associated with higher severity and mortality in patients with both COVID-19. Age was comparable between male, female and child in all data sets. While male and female have the same prevalence, female with COVID-19 are more at risk for worse outcomes and death, independent of age, whereas male data was shown less.
"""